{"mappings":"iiBAAAA,EAAA,SCCA,IAAAC,EAAAD,EAAA,S,aAAME,EAAW,gC,SACFC,EAAUC,EAAWC,G,OAArBC,EAASC,MAAAC,KAAAC,U,UAATH,I,OAAAA,EAAfI,EAAAT,EAAA,CAAAS,EAAAC,GAAAC,MAAA,SAAAC,EAAyBT,EAAWC,G,IAE1BS,EACAC,E,2FADiBC,MAAM,GAAcC,OAAXf,GAAqBe,OAAVb,GAAaC,G,cAAlDS,EAAQI,EAAAC,K,SACKL,EAASM,O,cAAtBL,EAAIG,EAAAC,K,kBACHJ,EAAKM,QAAQC,MAAM,EAAG,I,kCAE7BC,QAAQC,IAAIN,EAAAO,GAAMC,S,2DANEnB,MAAAC,KAAAC,U,UAUTkB,EAAYtB,G,OAAZuB,EAAWrB,MAAAC,KAAAC,U,UAAXmB,I,OAAAA,EAAflB,EAAAT,EAAA,CAAAS,EAAAC,GAAAC,MAAA,SAAAC,EAA2BR,G,IAEjBS,EAIAC,E,2FAJiBC,MACrB,GAAYC,OAATf,EAAS,gCACZG,G,cAFIS,EAAQI,EAAAC,K,SAIKL,EAASM,O,cAAtBL,EAAIG,EAAAC,K,kBACHJ,EAAKc,Q,kCAEZN,QAAQC,IAAIN,EAAAO,GAAMC,S,2DATInB,MAAAC,KAAAC,U,CCZ1B,IAAMqB,EAAcC,SAASC,cAAc,gBCA3C,SAASC,EAAcC,EAAWC,GAgBhC,OAf0BD,EAAUE,KAAI,SAAAC,GACtC,IACMR,EADWQ,EAAMC,UACCF,KACtB,SAAAG,G,OAAMJ,EAAUK,MAAK,SAAAC,G,OAASA,EAAMF,KAAOA,C,IAAIG,I,IAGjD,MAAO,CACLC,aAAcN,EAAMM,aACpBJ,GAAIF,EAAME,GACVK,MAAOP,EAAMO,MACbC,OAAQR,EAAMS,YACdC,WAAYlB,EAAO,GACnBmB,YAAanB,EAAO,G,ICX1B,SAASoB,EAAaf,EAAWC,GAC/B,IAAMe,EAAkBjB,EAAcC,EAAWC,GAEjD,OAAsBe,EASnBd,KACC,SAAAC,G,MAAS,+CAICpB,OAH2BoB,EAAME,GAAG,2IAI5BtB,OADRoB,EAAMQ,OACP,WAE+B5B,OAFtBoB,EAAMO,MAAM,kGAIiB3B,OAFPoB,EAAMO,MAAM,0GAGlD3B,OAD6CoB,EAAMU,WAAW,WAGlB9B,OAF5CoB,EAAMW,YACP,mEAIiB/B,OAH4BoB,EAAMM,aAAarB,MAC/C,EACA,GACA,kF,IAMnB6B,KAAK,G,CA5BV,SAASC,EAAUC,EAASC,GAC1BD,EAAQE,UAAYD,C,CCHtB,IACME,EAAU,CACdC,OAAQ,MACRC,QAAS,CACPC,OAAQ,mBACRC,cACE,+NAMNC,OAAOC,iBAAiB,QAGxB,WACE,IAAMC,EAAepC,EAAY6B,GAEjCrD,EAlBgB,mCAkBKqD,GAASQ,MAAK,SAAA9B,GACjCX,QAAQC,IAAIU,GAEZ6B,EAAaC,MAAK,SAAA7B,GAChB,IAAMmB,EAASL,EAAaf,EAAWC,GACvCiB,EAAUtB,EAAawB,E","sources":["src/index.js","src/js/api/fetchWeekly.js","src/js/refs/weeklyRefs.js","src/js/utils/weeklyUtils.js","src/js/markup/weeklyMarkup.js","src/js/components/weekly.js"],"sourcesContent":["import './js/components/header';\nimport './js/components/hero';\nimport './js/components/weekly';\nimport './js/components/upcoming';\nimport './js/components/modal';\nimport './js/components/footer';\n","//FETCH\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nasync function fetchData(END_POINT, options) {\n  try {\n    const response = await fetch(`${BASE_URL}${END_POINT}`, options);\n    const data = await response.json();\n    return data.results.slice(0, 3);\n  } catch (error) {\n    console.log(error.message);\n  }\n}\n\nasync function fetchGenres(options) {\n  try {\n    const response = await fetch(\n      `${BASE_URL}genre/movie/list?language=en`,\n      options\n    );\n    const data = await response.json();\n    return data.genres;\n  } catch (error) {\n    console.log(error.message);\n  }\n}\n\nexport { fetchData };\nexport { fetchGenres };\n","const weeklyUlRef = document.querySelector('.weekly-list');\nexport { weeklyUlRef };\n","function transformData(movieData, genreData) {\n  const transformedMovies = movieData.map(movie => {\n    const genreIds = movie.genre_ids;\n    const genres = genreIds.map(\n      id => genreData.find(genre => genre.id === id).name\n    );\n\n    return {\n      release_date: movie.release_date,\n      id: movie.id,\n      title: movie.title,\n      poster: movie.poster_path,\n      genreFirst: genres[0],\n      genreSecond: genres[1],\n    };\n  });\n  return transformedMovies;\n}\n\nexport { transformData };\n","import { transformData } from '../utils/weeklyUtils';\n\nfunction renderMarkup(movieData, genreData) {\n  const transformedData = transformData(movieData, genreData);\n\n  return generateMarkup(transformedData);\n}\n\nfunction addMarkup(element, markup) {\n  element.innerHTML = markup;\n}\n\nfunction generateMarkup(data) {\n  const markup = data\n    .map(\n      movie => ` \n        <li class=\"weekly-item\" data-id=\"${movie.id}\">\n          <a class=\"weekly-link link\" href=\"\">\n              <img class=\"weekly-poster-list\" src=\"https://image.tmdb.org/t/p/w500/${\n                movie.poster\n              }\" alt=\"${movie.title}\" />       \n          <div class=\"weekly-info\">\n              <h2 class=\"weekly-info-title\">${movie.title}</h2>\n                  <div class=\"info-movie\">\n                      <p class=\"weekly-info-genre\">${movie.genreFirst},&nbsp ${\n        movie.genreSecond\n      }&nbsp ‚ñè</p>\n                      <p class=\"weekly-info-date\">${movie.release_date.slice(\n                        0,\n                        4\n                      )}</p>\n                  </div>\n          </div></a>     \n      </li>\n       `\n    )\n    .join('');\n\n  return markup;\n}\n\nexport { renderMarkup, addMarkup, generateMarkup };\n","import { fetchData } from '../api/fetchWeekly';\nimport { fetchGenres } from '../api/fetchWeekly';\nimport { weeklyUlRef } from '../refs/weeklyRefs';\n\nimport { renderMarkup, addMarkup } from '../markup/weeklyMarkup';\n\nconst END_POINT = 'trending/all/week?language=en-US';\nconst options = {\n  method: 'GET',\n  headers: {\n    accept: 'application/json',\n    Authorization:\n      'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJiZDBhNDQ5OWUzZjBiMDM2MDI1ZDEyNTk1Mzk3MjI3YSIsInN1YiI6IjY0N2YxZDM3Y2FlZjJkMDEzNjJjZDBjMyIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.04GEOyHwNXnOZB4gUWNaiyPlLlOZ0z9Ttfl7T5UFMuk',\n  },\n};\n\n// WORKSPACE\n\nwindow.addEventListener('load', onPageLoad);\n\n// LISTENERS\nfunction onPageLoad() {\n  const genrePromise = fetchGenres(options);\n\n  fetchData(END_POINT, options).then(movieData => {\n    console.log(movieData);\n\n    genrePromise.then(genreData => {\n      const markup = renderMarkup(movieData, genreData);\n      addMarkup(weeklyUlRef, markup);\n    });\n  });\n}\n"],"names":["parcelRequire","$bpxeT","$15e1d5de8d44c5fc$var$BASE_URL","$15e1d5de8d44c5fc$export$8134c072fddab6a5","END_POINT","options","$15e1d5de8d44c5fc$var$_fetchData","apply","this","arguments","$parcel$interopDefault","$2TvXO","mark","_callee","response","data","fetch","concat","_ctx","sent","json","results","slice","console","log","t0","message","$15e1d5de8d44c5fc$export$e95d448b93b2cdb","$15e1d5de8d44c5fc$var$_fetchGenres","genres","$d74639c227004755$export$1e4302467ae64eb8","document","querySelector","$c9916a4381095b76$export$3ceb62baab058c6b","movieData","genreData","map","movie","genre_ids","id","find","genre","name","release_date","title","poster","poster_path","genreFirst","genreSecond","$e8f1cd010089648f$export$add40575555c273c","transformedData","join","$e8f1cd010089648f$export$485cc6bdae71a787","element","markup","innerHTML","$aaf9b47dbc5057fd$var$options","method","headers","accept","Authorization","window","addEventListener","genrePromise","then"],"version":3,"file":"index.3786dd04.js.map"}