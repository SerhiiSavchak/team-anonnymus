{"mappings":"iiBAAAA,EAAA,SCAA,IAAAC,EAAAD,EAAA,S,sBAaeE,EAAUC,EAAWC,G,OAArBC,EAASC,MAAAC,KAAAC,U,UAATH,I,OAAAA,EAAfI,EAAAR,EAAA,CAAAQ,EAAAC,GAAAC,MAAA,SAAAC,EAAyBT,EAAWC,G,IAE1BS,EAIAC,E,2FAJiBC,MACrB,gCAA0CC,OAAVb,GAChCC,G,cAFIS,EAAQI,EAAAC,K,SAIKL,EAASM,O,cAAtBL,EAAIG,EAAAC,K,kBACHJ,EAAKM,QAAQC,MAAM,EAAG,I,kCAE7BC,QAAQC,IAAIN,EAAAO,GAAMC,S,2DATEnB,MAAAC,KAAAC,U,UAaTkB,EAAYC,G,OAAZC,EAAWtB,MAAAC,KAAAC,U,UAAXoB,I,OAAAA,EAAfnB,EAAAR,EAAA,CAAAQ,EAAAC,GAAAC,MAAA,SAAAC,EAA2Be,G,IAEjBd,EAIAC,E,2FAJiBC,MACrB,4DACAY,G,cAFId,EAAQI,EAAAC,K,SAIKL,EAASM,O,cAAtBL,EAAIG,EAAAC,K,kBACHJ,EAAKe,Q,kCAEZP,QAAQC,IAAIN,EAAAO,GAAMC,S,2DATInB,MAAAC,KAAAC,U,CCxB1B,IAEMsB,EAAU,CACdC,OAAQ,MACRC,QAAS,CACPC,OAAQ,mBACRC,cACE,+NAMAC,EAAcC,SAASC,cAAc,gBAI3CC,OAAOC,iBAAiB,QAGxB,WACE,IAAMC,EAAed,EAAYI,GAEjC5B,EAtBgB,mCAsBK4B,GAASW,MAAK,SAAAC,GACjCpB,QAAQC,IAAImB,GAEZF,EAAaC,MAAK,SAAAE,GAChB,IAAMC,EA2BZ,SAAsBF,EAAWC,GAG/B,OASsB7B,EA/BxB,SAAuB4B,EAAWC,GAgBhC,OAf0BD,EAAUG,KAAI,SAAAC,GACtC,IACMjB,EADWiB,EAAMC,UACCF,KACtB,SAAAG,G,OAAML,EAAUM,MAAK,SAAAC,G,OAASA,EAAMF,KAAOA,C,IAAIG,I,IAGjD,MAAO,CACLC,aAAcN,EAAMM,aACpBJ,GAAIF,EAAME,GACVK,MAAOP,EAAMO,MACbC,OAAQR,EAAMS,YACdC,WAAY3B,EAAO,GACnB4B,YAAa5B,EAAO,G,IAOA6B,CAAchB,EAAWC,GAYlC7B,EACZ+B,KACC,SAAAC,G,MAAS,6CAID9B,OAH2B8B,EAAME,GAAG,uIAI5BhC,OADR8B,EAAMQ,OACP,WAE+BtC,OAFtB8B,EAAMO,MAAM,8FAIiBrC,OAFP8B,EAAMO,MAAM,sGAGhDrC,OAD2C8B,EAAMU,WAAW,WAGlBxC,OAF1C8B,EAAMW,YACP,iEAIezC,OAH4B8B,EAAMM,aAAa/B,MAC/C,EACA,GACA,0E,IAMjBsC,KAAK,IAxBV,IAAwB7C,C,CAvCH8C,CAAalB,EAAWC,IAiC7C,SAAmBkB,EAASjB,GAC1BiB,EAAQC,UAAYlB,C,CAjChBmB,CAAU5B,EAAaS,E","sources":["src/index.js","src/js/api/fetchWeekly.js","src/js/components/weekly.js"],"sourcesContent":["import './js/components/header';\nimport './js/components/hero';\nimport './js/components/weekly';\nimport './js/components/upcoming';\nimport './js/components/modal';\nimport './js/components/footer';\n","const BASE_URL = 'https://api.themoviedb.org/3/';\nconst END_POINT = 'trending/all/week?language=en-US';\nconst options = {\n  method: 'GET',\n  headers: {\n    accept: 'application/json',\n    Authorization:\n      'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJiZDBhNDQ5OWUzZjBiMDM2MDI1ZDEyNTk1Mzk3MjI3YSIsInN1YiI6IjY0N2YxZDM3Y2FlZjJkMDEzNjJjZDBjMyIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.04GEOyHwNXnOZB4gUWNaiyPlLlOZ0z9Ttfl7T5UFMuk',\n  },\n};\n\n//FETCH\n\nasync function fetchData(END_POINT, options) {\n  try {\n    const response = await fetch(\n      `https://api.themoviedb.org/3/${END_POINT}`,\n      options\n    );\n    const data = await response.json();\n    return data.results.slice(0, 3);\n  } catch (error) {\n    console.log(error.message);\n  }\n}\n\nasync function fetchGenres(options) {\n  try {\n    const response = await fetch(\n      'https://api.themoviedb.org/3/genre/movie/list?language=en',\n      options\n    );\n    const data = await response.json();\n    return data.genres;\n  } catch (error) {\n    console.log(error.message);\n  }\n}\n\nexport { fetchData };\nexport { fetchGenres };\n","import { fetchData } from '../api/fetchWeekly';\nimport { fetchGenres } from '../api/fetchWeekly';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst END_POINT = 'trending/all/week?language=en-US';\nconst options = {\n  method: 'GET',\n  headers: {\n    accept: 'application/json',\n    Authorization:\n      'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJiZDBhNDQ5OWUzZjBiMDM2MDI1ZDEyNTk1Mzk3MjI3YSIsInN1YiI6IjY0N2YxZDM3Y2FlZjJkMDEzNjJjZDBjMyIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.04GEOyHwNXnOZB4gUWNaiyPlLlOZ0z9Ttfl7T5UFMuk',\n  },\n};\n\n// REFS\n\nconst weeklyUlRef = document.querySelector('.weekly-list');\n\n// WORKSPACE\n\nwindow.addEventListener('load', onPageLoad);\n\n// LISTENERS\nfunction onPageLoad() {\n  const genrePromise = fetchGenres(options);\n\n  fetchData(END_POINT, options).then(movieData => {\n    console.log(movieData);\n\n    genrePromise.then(genreData => {\n      const markup = renderMarkup(movieData, genreData);\n      addMarkup(weeklyUlRef, markup);\n    });\n  });\n}\n\n// UTILS\n\nfunction transformData(movieData, genreData) {\n  const transformedMovies = movieData.map(movie => {\n    const genreIds = movie.genre_ids;\n    const genres = genreIds.map(\n      id => genreData.find(genre => genre.id === id).name\n    );\n\n    return {\n      release_date: movie.release_date,\n      id: movie.id,\n      title: movie.title,\n      poster: movie.poster_path,\n      genreFirst: genres[0],\n      genreSecond: genres[1],\n    };\n  });\n  return transformedMovies;\n}\n\nfunction renderMarkup(movieData, genreData) {\n  const transformedData = transformData(movieData, genreData);\n\n  return generateMarkup(transformedData);\n}\n\nfunction addMarkup(element, markup) {\n  element.innerHTML = markup;\n}\n\n// MARKUP\n\nfunction generateMarkup(data) {\n  const markup = data\n    .map(\n      movie => ` \n      <li class=\"weekly-item\" data-id=\"${movie.id}\">\n        <a class=\"weekly-link link\" href=\"\">\n            <img class=\"weekly-poster-list\" src=\"https://image.tmdb.org/t/p/w500/${\n              movie.poster\n            }\" alt=\"${movie.title}\" />       \n        <div class=\"weekly-info\">\n            <h2 class=\"weekly-info-title\">${movie.title}</h2>\n                <div class=\"info-movie\">\n                    <p class=\"weekly-info-genre\">${movie.genreFirst},&nbsp ${\n        movie.genreSecond\n      }&nbsp ▏</p>\n                    <p class=\"weekly-info-date\">${movie.release_date.slice(\n                      0,\n                      4\n                    )}</p>\n                </div>\n        </div></a>     \n    </li>\n     `\n    )\n    .join('');\n\n  return markup;\n}\n\n// //FETCH\n\n// const axios = require(\"axios\");\n\n// async function fetchData(END_POINT, options) {\n//   const response = await axios.get(\n//     `${BASE_URL}${END_POINT}`,\n//     options\n//   );\n//   return response.data.results.slice(0, 3);\n// }\n\n// async function fetchGenres(options) {\n//   const response = await axios.get(\n//     `https://api.themoviedb.org/3/genre/movie/list?language=en`,\n//     options\n//   );\n//   return response.data.genres;\n// }\n\n//////копія на всякий случай----------------------------------------------------------------\n// async function fetchData(END_POINT, options) {\n//   const response = await fetch(\n//     `${BASE_URL}${END_POINT}`,\n//     options\n//   );\n//   const data = await response.json();\n//   return data.results.slice(0, 3);\n// }\n\n// async function fetchGenres(options) {\n//   const response = await fetch(\n//     `https://api.themoviedb.org/3/genre/movie/list?language=en`,\n//     options\n//   );\n//   const data = await response.json();\n//   return data.genres;\n// }\n"],"names":["parcelRequire","$bpxeT","$15e1d5de8d44c5fc$export$8134c072fddab6a5","END_POINT1","options1","$15e1d5de8d44c5fc$var$_fetchData","apply","this","arguments","$parcel$interopDefault","$2TvXO","mark","_callee","response","data","fetch","concat","_ctx","sent","json","results","slice","console","log","t0","message","$15e1d5de8d44c5fc$export$e95d448b93b2cdb","options2","$15e1d5de8d44c5fc$var$_fetchGenres","genres","$aaf9b47dbc5057fd$var$options","method","headers","accept","Authorization","$aaf9b47dbc5057fd$var$weeklyUlRef","document","querySelector","window","addEventListener","genrePromise","then","movieData","genreData","markup","map","movie","genre_ids","id","find","genre","name","release_date","title","poster","poster_path","genreFirst","genreSecond","$aaf9b47dbc5057fd$var$transformData","join","$aaf9b47dbc5057fd$var$renderMarkup","element","innerHTML","$aaf9b47dbc5057fd$var$addMarkup"],"version":3,"file":"index.a5a997a4.js.map"}