{"mappings":"AAWAA,eAAeC,EAAUC,EAAWC,GAChC,MAAMC,QAAiBC,MACrB,gCAAcH,IACdC,GAGF,aADmBC,EAASE,QAChBC,QAAQC,MAAM,EAAG,E,CAG/BR,eAAeS,EAAYC,GACzB,MAAMN,QAAiBC,MACrB,4DACAK,GAGF,aADmBN,EAASE,QAChBK,M,CCxBhB,MAEMC,EAAU,CACdC,OAAQ,MACRC,QAAS,CACPC,OAAQ,mBACRC,cACE,+NAMAC,EAAcC,SAASC,cAAc,gBAI3CC,OAAOC,iBAAiB,QAGxB,WACEpB,EApBgB,mCAoBKW,GAASU,MAAKC,KA4DrCvB,eAA4BuB,GAC1B,aAAad,EAAYG,GAASU,MAAKE,IACrC,MAAMC,EArDV,SAAuBF,EAAWC,GAiBhC,OAhB0BD,EAAUG,KAAIC,IACtC,MACMhB,EADWgB,EAAMC,UACCF,KACtBG,GAAML,EAAUM,MAAKC,GAASA,EAAMF,KAAOA,IAAIG,OAGjD,MAAO,CACLC,aAAcN,EAAMM,aACpBJ,GAAIF,EAAME,GACVK,MAAOP,EAAMO,MACbC,OAAQR,EAAMS,YACdC,WAAY1B,EAAO,GACnB2B,YAAa3B,EAAO,GACrB,G,CAuCuB4B,CAAchB,EAAWC,GAGjD,OAFAgB,QAAQC,IAAIhB,GAEUA,EAhCrBC,KACCC,GAAS,qKAIDA,EAAMQ,gBACER,EAAMO,kGAEgBP,EAAMO,0GAECP,EAAMU,oBACjDV,EAAMW,2EAEoCX,EAAMM,aAAazB,MAC/C,EACA,8EAOjBkC,KAAK,GAUgC,G,EAhEtCC,CAAapB,GAAWD,MAAKsB,KAoEjC,SAAmBC,EAASD,GAC1BC,EAAQC,UAAYF,C,CApEhBG,CAAU9B,EAAa2B,EAAO,GAC9B,G,IC1BN,MAAMI,EAAe9B,SAAS+B,eAAe,UACvCC,EAAOhC,SAAS+B,eAAe,OAC/BE,EAAOjC,SAAS+B,eAAe,QAC/BG,EAAOlC,SAASC,cAAc,QAC9BkC,EAASnC,SAASC,cAAc,WAChCmC,EAAUpC,SAASC,cAAc,kBACvC6B,EAAa3B,iBAAiB,SAAS,WACrC6B,EAAKK,UAAUC,OAAO,UACtBN,EAAKK,UAAUC,OAAO,aACvB,MAAMC,EAAMN,EAAKI,UAAUC,OAAO,UAClCL,EAAKI,UAAUC,OAAO,aAClBC,GACDL,EAAKM,MAAMC,gBAAkB,SAC7BN,EAAOK,MAAMC,gBAAkB,QAC/BL,EAAQI,MAAME,MAAQ,YAEtBR,EAAKM,MAAMC,gBAAkB,SAC7BN,EAAOK,MAAMC,gBAAkB,QAC/BL,EAAQI,MAAME,MAAQ,U,IAKzB,MACC,MAAMC,EAAO,CACXC,YAAa5C,SAASC,cAAc,oBACpC4C,aAAc7C,SAASC,cAAc,qBACrC6C,KAAM9C,SAASC,cAAc,gBAW/B,SAAS8C,IACPJ,EAAKG,KAAKE,aAAa,UAAU,GACjC9C,OAAO+C,oBAAoB,SAAUC,E,CAGvC,SAASA,IACahD,OAAOiD,WACT,KAChBJ,G,CAhBJJ,EAAKC,YAAYzC,iBAAiB,SAGlC,WACEwC,EAAKG,KAAKM,gBAAgB,UAC1BlD,OAAOC,iBAAiB,SAAU+C,E,IAJpCP,EAAKE,aAAa1C,iBAAiB,QAAS4C,EAkB7C,EA1BA","sources":["src/js/api/fetchWeekly.js","src/js/components/weekly.js","src/js/components/header.js"],"sourcesContent":["const BASE_URL = 'https://api.themoviedb.org/3/';\nconst END_POINT = 'trending/all/week?language=en-US';\nconst options = {\n  method: 'GET',\n  headers: {\n    accept: 'application/json',\n    Authorization:\n      'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJiZDBhNDQ5OWUzZjBiMDM2MDI1ZDEyNTk1Mzk3MjI3YSIsInN1YiI6IjY0N2YxZDM3Y2FlZjJkMDEzNjJjZDBjMyIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.04GEOyHwNXnOZB4gUWNaiyPlLlOZ0z9Ttfl7T5UFMuk',\n  },\n};\n\nasync function fetchData(END_POINT, options) {\n    const response = await fetch(\n      `${BASE_URL}${END_POINT}`,\n      options\n    );\n    const data = await response.json();\n    return data.results.slice(0, 3);\n  }\n  \n  async function fetchGenres(options) {\n    const response = await fetch(\n      `https://api.themoviedb.org/3/genre/movie/list?language=en`,\n      options\n    );\n    const data = await response.json();\n    return data.genres;\n  }\n\nexport { fetchData }\nexport { fetchGenres }\n  ","import { fetchData } from '../api/fetchWeekly';\nimport { fetchGenres } from '../api/fetchWeekly';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst END_POINT = 'trending/all/week?language=en-US';\nconst options = {\n  method: 'GET',\n  headers: {\n    accept: 'application/json',\n    Authorization:\n      'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJiZDBhNDQ5OWUzZjBiMDM2MDI1ZDEyNTk1Mzk3MjI3YSIsInN1YiI6IjY0N2YxZDM3Y2FlZjJkMDEzNjJjZDBjMyIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.04GEOyHwNXnOZB4gUWNaiyPlLlOZ0z9Ttfl7T5UFMuk',\n  },\n};\n\n// REFS\n\nconst weeklyUlRef = document.querySelector('.weekly-list');\n\n// WORKSPACE\n\nwindow.addEventListener('load', onPageLoad);\n\n// LISTENERS\nfunction onPageLoad() {\n  fetchData(END_POINT, options).then(movieData => {\n    renderMarkup(movieData).then(markup => {\n      addMarkup(weeklyUlRef, markup);\n    });\n  });\n}\n\n// UTILS\n\nfunction transformData(movieData, genreData) {\n  const transformedMovies = movieData.map(movie => {\n    const genreIds = movie.genre_ids;\n    const genres = genreIds.map(\n      id => genreData.find(genre => genre.id === id).name\n    );\n\n    return {\n      release_date: movie.release_date,\n      id: movie.id,\n      title: movie.title,\n      poster: movie.poster_path,\n      genreFirst: genres[0],\n      genreSecond: genres[1],\n    };\n  });\n\n  return transformedMovies;\n}\n\n// MARKUP\n\nfunction generateMarkup(data) {\n  const markup = data\n    .map(\n      movie => ` \n      <li class=\"weekly-item\">\n        <a class=\"weekly-link link\" href=\"\">\n            <img class=\"weekly-poster-list\" src=\"https://image.tmdb.org/t/p/w500/${\n              movie.poster\n            }\" alt=\"${movie.title}\" />       \n        <div class=\"weekly-info\">\n            <h2 class=\"weekly-info-title\">${movie.title}</h2>\n                <div class=\"info-movie\">\n                    <p class=\"weekly-info-genre\">${movie.genreFirst},&nbsp ${\n        movie.genreSecond\n      }&nbsp ▏</p>\n                    <p class=\"weekly-info-date\">${movie.release_date.slice(\n                      0,\n                      4\n                    )}</p>\n                </div>\n        </div></a>     \n    </li>\n     `\n    )\n    .join('');\n\n  return markup;\n}\n\nasync function renderMarkup(movieData) {\n  return await fetchGenres(options).then(genreData => {\n    const transformedData = transformData(movieData, genreData);\n    console.log(transformedData);\n\n    return generateMarkup(transformedData);\n  });\n}\n\nfunction addMarkup(element, markup) {\n  element.innerHTML = markup;\n}\n\n// //FETCH\n\n// const axios = require(\"axios\");\n\n// async function fetchData(END_POINT, options) {\n//   const response = await axios.get(\n//     `${BASE_URL}${END_POINT}`,\n//     options\n//   );\n//   return response.data.results.slice(0, 3);\n// }\n\n// async function fetchGenres(options) {\n//   const response = await axios.get(\n//     `https://api.themoviedb.org/3/genre/movie/list?language=en`,\n//     options\n//   );\n//   return response.data.genres;\n// }\n\n//////копія на всякий случай----------------------------------------------------------------\n// async function fetchData(END_POINT, options) {\n//   const response = await fetch(\n//     `${BASE_URL}${END_POINT}`,\n//     options\n//   );\n//   const data = await response.json();\n//   return data.results.slice(0, 3);\n// }\n\n// async function fetchGenres(options) {\n//   const response = await fetch(\n//     `https://api.themoviedb.org/3/genre/movie/list?language=en`,\n//     options\n//   );\n//   const data = await response.json();\n//   return data.genres;\n// }\n","const switchButton = document.getElementById('switch');\nconst svg1 = document.getElementById(\"sun\");\nconst svg2 = document.getElementById(\"moon\");\nconst body = document.querySelector(\"body\");\nconst header = document.querySelector(\".header\");\nconst menuBtn = document.querySelector(\".menu-open-btn\");\nswitchButton.addEventListener('click', function() {\n  svg1.classList.toggle('active');\n  svg1.classList.toggle('no-active');\n const moon =svg2.classList.toggle('active');\n svg2.classList.toggle('no-active');\n  if(moon){\n    body.style.backgroundColor = \"f8f8f8\";\n    header.style.backgroundColor = \"black\";\n    menuBtn.style.color = \"#B7B7B7\";\n  }else{\n    body.style.backgroundColor = \"f8f8f8\";\n    header.style.backgroundColor = \"white\";\n    menuBtn.style.color = \"#595959\";\n    \n  }\n});\n\n(() => {\n  const refs = {\n    openMenuBtn: document.querySelector(\"[data-menu-open]\"),\n    closeMenuBtn: document.querySelector(\"[data-menu-close]\"),\n    menu: document.querySelector(\"[data-menu]\"),\n  };\n\n  refs.openMenuBtn.addEventListener(\"click\", openMenu);\n  refs.closeMenuBtn.addEventListener(\"click\", closeMenu);\n\n  function openMenu() {\n    refs.menu.removeAttribute(\"hidden\");\n    window.addEventListener(\"resize\", checkWindowWidth);\n  }\n\n  function closeMenu() {\n    refs.menu.setAttribute(\"hidden\", true);\n    window.removeEventListener(\"resize\", checkWindowWidth);\n  }\n\n  function checkWindowWidth() {\n    const screenWidth = window.innerWidth;\n    if (screenWidth > 767) {\n      closeMenu();\n    }\n  }\n})();\n\n"],"names":["async","$bce748f2d8dfedab$export$8134c072fddab6a5","END_POINT1","options1","response","fetch","json","results","slice","$bce748f2d8dfedab$export$e95d448b93b2cdb","options2","genres","$83069180f38e8654$var$options","method","headers","accept","Authorization","$83069180f38e8654$var$weeklyUlRef","document","querySelector","window","addEventListener","then","movieData","genreData","transformedData","map","movie","genre_ids","id","find","genre","name","release_date","title","poster","poster_path","genreFirst","genreSecond","$83069180f38e8654$var$transformData","console","log","join","$83069180f38e8654$var$renderMarkup","markup","element","innerHTML","$83069180f38e8654$var$addMarkup","$2822dddaba6d2aa9$var$switchButton","getElementById","$2822dddaba6d2aa9$var$svg1","$2822dddaba6d2aa9$var$svg2","$2822dddaba6d2aa9$var$body","$2822dddaba6d2aa9$var$header","$2822dddaba6d2aa9$var$menuBtn","classList","toggle","moon","style","backgroundColor","color","refs","openMenuBtn","closeMenuBtn","menu","closeMenu","setAttribute","removeEventListener","checkWindowWidth","innerWidth","removeAttribute"],"version":3,"file":"index.45d9230a.js.map"}