{"mappings":"oeAAAA,EAAA,SCCA,IAAAC,EAAAD,EAAA,SAEAE,eAAeC,EAAUC,EAAWC,GAClC,IACE,MAAMC,QAAiBC,MAAM,GAAGN,EAAAO,WAAWJ,IAAaC,GAExD,aADmBC,EAASG,QAChBC,QAAQC,MAAM,EAAG,E,CAC7B,MAAOC,GACPC,QAAQC,IAAIF,EAAMG,Q,EAItBb,eAAec,EAAYX,GACzB,IACE,MAAMC,QAAiBC,MACrB,GAAGN,EAAAO,uCACHH,GAGF,aADmBC,EAASG,QAChBQ,M,CACZ,MAAOL,GACPC,QAAQC,IAAIF,EAAMG,Q,ECtBtB,MAAMG,EAAcC,SAASC,cAAc,gBCA3C,SAASC,EAAcC,EAAWC,GAgBhC,OAf0BD,EAAUE,KAAIC,IACtC,MACMR,EADWQ,EAAMC,UACCF,KACtBG,GAAMJ,EAAUK,MAAKC,GAASA,EAAMF,KAAOA,IAAIG,OAGjD,MAAO,CACLC,aAAcN,EAAMM,aACpBJ,GAAIF,EAAME,GACVK,MAAOP,EAAMO,MACbC,OAAQR,EAAMS,YACdC,WAAYlB,EAAO,GACnBmB,YAAanB,EAAO,GACrB,G,CCZL,SAASoB,EAAaf,EAAWC,GAC/B,MAAMe,EAAkBjB,EAAcC,EAAWC,GAEjD,OAAsBe,EASnBd,KACCC,GAAS,+CAC4BA,EAAME,4IAGjCF,EAAMQ,gBACER,EAAMO,sGAEgBP,EAAMO,8GAECP,EAAMU,oBACnDV,EAAMW,6EAEsCX,EAAMM,aAAapB,MAC/C,EACA,sFAOnB4B,KAAK,G,CA5BV,SAASC,EAAUC,EAASC,GAC1BD,EAAQE,UAAYD,C,CCHtB,MACME,EAAU,CACdC,OAAQ,MACRC,QAAS,CACPC,OAAQ,mBACRC,cACE,+NAMNC,OAAOC,iBAAiB,QAGxB,WACE,MAAMC,EAAenC,EAAY4B,GAEjCzC,EAlBgB,mCAkBKyC,GAASQ,MAAK9B,IACjCT,QAAQC,IAAIQ,GAEZ6B,EAAaC,MAAK7B,IAChB,MAAMmB,EAASL,EAAaf,EAAWC,GACvCiB,EAAUtB,EAAawB,EAAO,GAC9B,G","sources":["src/index.js","src/js/api/fetchWeekly.js","src/js/refs/weeklyRefs.js","src/js/utils/weeklyUtils.js","src/js/markup/weeklyMarkup.js","src/js/components/weekly.js"],"sourcesContent":["import './js/components/header';\nimport './js/components/hero';\nimport './js/components/weekly';\nimport './js/components/upcoming';\nimport './js/components/modal';\nimport './js/components/footer';\n","//FETCH\nimport { BASE_URL } from './apiKey';\n\nasync function fetchData(END_POINT, options) {\n  try {\n    const response = await fetch(`${BASE_URL}${END_POINT}`, options);\n    const data = await response.json();\n    return data.results.slice(0, 3);\n  } catch (error) {\n    console.log(error.message);\n  }\n}\n\nasync function fetchGenres(options) {\n  try {\n    const response = await fetch(\n      `${BASE_URL}genre/movie/list?language=en`,\n      options\n    );\n    const data = await response.json();\n    return data.genres;\n  } catch (error) {\n    console.log(error.message);\n  }\n}\n\nexport { fetchData };\nexport { fetchGenres };\n","const weeklyUlRef = document.querySelector('.weekly-list');\nexport { weeklyUlRef };\n","function transformData(movieData, genreData) {\n  const transformedMovies = movieData.map(movie => {\n    const genreIds = movie.genre_ids;\n    const genres = genreIds.map(\n      id => genreData.find(genre => genre.id === id).name\n    );\n\n    return {\n      release_date: movie.release_date,\n      id: movie.id,\n      title: movie.title,\n      poster: movie.poster_path,\n      genreFirst: genres[0],\n      genreSecond: genres[1],\n    };\n  });\n  return transformedMovies;\n}\n\nexport { transformData };\n","import { transformData } from '../utils/weeklyUtils';\n\nfunction renderMarkup(movieData, genreData) {\n  const transformedData = transformData(movieData, genreData);\n\n  return generateMarkup(transformedData);\n}\n\nfunction addMarkup(element, markup) {\n  element.innerHTML = markup;\n}\n\nfunction generateMarkup(data) {\n  const markup = data\n    .map(\n      movie => ` \n        <li class=\"weekly-item\" data-id=\"${movie.id}\">\n          <a class=\"weekly-link link\" href=\"\">\n              <img class=\"weekly-poster-list\" src=\"https://image.tmdb.org/t/p/w500/${\n                movie.poster\n              }\" alt=\"${movie.title}\" />       \n          <div class=\"weekly-info\">\n              <h2 class=\"weekly-info-title\">${movie.title}</h2>\n                  <div class=\"info-movie\">\n                      <p class=\"weekly-info-genre\">${movie.genreFirst},&nbsp ${\n        movie.genreSecond\n      }&nbsp ‚ñè</p>\n                      <p class=\"weekly-info-date\">${movie.release_date.slice(\n                        0,\n                        4\n                      )}</p>\n                  </div>\n          </div></a>     \n      </li>\n       `\n    )\n    .join('');\n\n  return markup;\n}\n\nexport { renderMarkup, addMarkup, generateMarkup };\n","import { fetchData } from '../api/fetchWeekly';\nimport { fetchGenres } from '../api/fetchWeekly';\nimport { weeklyUlRef } from '../refs/weeklyRefs';\n\nimport { renderMarkup, addMarkup } from '../markup/weeklyMarkup';\n\nconst END_POINT = 'trending/all/week?language=en-US';\nconst options = {\n  method: 'GET',\n  headers: {\n    accept: 'application/json',\n    Authorization:\n      'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJiZDBhNDQ5OWUzZjBiMDM2MDI1ZDEyNTk1Mzk3MjI3YSIsInN1YiI6IjY0N2YxZDM3Y2FlZjJkMDEzNjJjZDBjMyIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.04GEOyHwNXnOZB4gUWNaiyPlLlOZ0z9Ttfl7T5UFMuk',\n  },\n};\n\n// WORKSPACE\n\nwindow.addEventListener('load', onPageLoad);\n\n// LISTENERS\nfunction onPageLoad() {\n  const genrePromise = fetchGenres(options);\n\n  fetchData(END_POINT, options).then(movieData => {\n    console.log(movieData);\n\n    genrePromise.then(genreData => {\n      const markup = renderMarkup(movieData, genreData);\n      addMarkup(weeklyUlRef, markup);\n    });\n  });\n}\n"],"names":["parcelRequire","$bkYP9","async","$bce748f2d8dfedab$export$8134c072fddab6a5","END_POINT","options","response","fetch","BASE_URL","json","results","slice","error","console","log","message","$bce748f2d8dfedab$export$e95d448b93b2cdb","genres","$164d1c149efb33c5$export$1e4302467ae64eb8","document","querySelector","$3b8d5ab2bfa9425f$export$3ceb62baab058c6b","movieData","genreData","map","movie","genre_ids","id","find","genre","name","release_date","title","poster","poster_path","genreFirst","genreSecond","$add57ff5b89d9e56$export$add40575555c273c","transformedData","join","$add57ff5b89d9e56$export$485cc6bdae71a787","element","markup","innerHTML","$83069180f38e8654$var$options","method","headers","accept","Authorization","window","addEventListener","genrePromise","then"],"version":3,"file":"index.4f503bfe.js.map"}