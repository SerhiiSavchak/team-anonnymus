{"mappings":"oeAAAA,EAAA,SCaAC,eAAeC,EAAUC,EAAWC,GAClC,IACE,MAAMC,QAAiBC,MACrB,gCAAgCH,IAChCC,GAGF,aADmBC,EAASE,QAChBC,QAAQC,MAAM,EAAG,E,CAC7B,MAAOC,GACPC,QAAQC,IAAIF,EAAMG,Q,EAItBZ,eAAea,EAAYC,GACzB,IACE,MAAMV,QAAiBC,MACrB,4DACAS,GAGF,aADmBV,EAASE,QAChBS,M,CACZ,MAAON,GACPC,QAAQC,IAAIF,EAAMG,Q,ECjCtB,MAEMI,EAAU,CACdC,OAAQ,MACRC,QAAS,CACPC,OAAQ,mBACRC,cACE,+NAMAC,EAAcC,SAASC,cAAc,gBAI3CC,OAAOC,iBAAiB,QAGxB,WACE,MAAMC,EAAeb,EAAYG,GAEjCf,EAtBgB,mCAsBKe,GAASW,MAAKC,IACjClB,QAAQC,IAAIiB,GAEZF,EAAaC,MAAKE,IAChB,MAAMC,EA2BZ,SAAsBF,EAAWC,GAG/B,OASsBE,EA/BxB,SAAuBH,EAAWC,GAgBhC,OAf0BD,EAAUI,KAAIC,IACtC,MACMlB,EADWkB,EAAMC,UACCF,KACtBG,GAAMN,EAAUO,MAAKC,GAASA,EAAMF,KAAOA,IAAIG,OAGjD,MAAO,CACLC,aAAcN,EAAMM,aACpBJ,GAAIF,EAAME,GACVK,MAAOP,EAAMO,MACbC,OAAQR,EAAMS,YACdC,WAAY5B,EAAO,GACnB6B,YAAa7B,EAAO,GACrB,G,CAMqB8B,CAAcjB,EAAWC,GAYlCE,EACZC,KACCC,GAAS,6CAC0BA,EAAME,wIAGjCF,EAAMQ,gBACER,EAAMO,kGAEgBP,EAAMO,0GAECP,EAAMU,oBACjDV,EAAMW,2EAEoCX,EAAMM,aAAa/B,MAC/C,EACA,8EAOjBsC,KAAK,IAxBV,IAAwBf,C,CAvCHgB,CAAanB,EAAWC,IAiC7C,SAAmBmB,EAASlB,GAC1BkB,EAAQC,UAAYnB,C,CAjChBoB,CAAU7B,EAAaS,EAAO,GAC9B,G","sources":["src/index.js","src/js/api/fetchWeekly.js","src/js/components/weekly.js"],"sourcesContent":["import './js/components/header';\nimport './js/components/hero';\nimport './js/components/weekly';\nimport './js/components/upcoming';\nimport './js/components/modal';\n","const BASE_URL = 'https://api.themoviedb.org/3/';\nconst END_POINT = 'trending/all/week?language=en-US';\nconst options = {\n  method: 'GET',\n  headers: {\n    accept: 'application/json',\n    Authorization:\n      'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJiZDBhNDQ5OWUzZjBiMDM2MDI1ZDEyNTk1Mzk3MjI3YSIsInN1YiI6IjY0N2YxZDM3Y2FlZjJkMDEzNjJjZDBjMyIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.04GEOyHwNXnOZB4gUWNaiyPlLlOZ0z9Ttfl7T5UFMuk',\n  },\n};\n\n//FETCH\n\nasync function fetchData(END_POINT, options) {\n  try {\n    const response = await fetch(\n      `https://api.themoviedb.org/3/${END_POINT}`,\n      options\n    );\n    const data = await response.json();\n    return data.results.slice(0, 3);\n  } catch (error) {\n    console.log(error.message);\n  }\n}\n\nasync function fetchGenres(options) {\n  try {\n    const response = await fetch(\n      'https://api.themoviedb.org/3/genre/movie/list?language=en',\n      options\n    );\n    const data = await response.json();\n    return data.genres;\n  } catch (error) {\n    console.log(error.message);\n  }\n}\n\nexport { fetchData };\nexport { fetchGenres };\n","import { fetchData } from '../api/fetchWeekly';\nimport { fetchGenres } from '../api/fetchWeekly';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst END_POINT = 'trending/all/week?language=en-US';\nconst options = {\n  method: 'GET',\n  headers: {\n    accept: 'application/json',\n    Authorization:\n      'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJiZDBhNDQ5OWUzZjBiMDM2MDI1ZDEyNTk1Mzk3MjI3YSIsInN1YiI6IjY0N2YxZDM3Y2FlZjJkMDEzNjJjZDBjMyIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.04GEOyHwNXnOZB4gUWNaiyPlLlOZ0z9Ttfl7T5UFMuk',\n  },\n};\n\n// REFS\n\nconst weeklyUlRef = document.querySelector('.weekly-list');\n\n// WORKSPACE\n\nwindow.addEventListener('load', onPageLoad);\n\n// LISTENERS\nfunction onPageLoad() {\n  const genrePromise = fetchGenres(options);\n\n  fetchData(END_POINT, options).then(movieData => {\n    console.log(movieData);\n\n    genrePromise.then(genreData => {\n      const markup = renderMarkup(movieData, genreData);\n      addMarkup(weeklyUlRef, markup);\n    });\n  });\n}\n\n// UTILS\n\nfunction transformData(movieData, genreData) {\n  const transformedMovies = movieData.map(movie => {\n    const genreIds = movie.genre_ids;\n    const genres = genreIds.map(\n      id => genreData.find(genre => genre.id === id).name\n    );\n\n    return {\n      release_date: movie.release_date,\n      id: movie.id,\n      title: movie.title,\n      poster: movie.poster_path,\n      genreFirst: genres[0],\n      genreSecond: genres[1],\n    };\n  });\n  return transformedMovies;\n}\n\nfunction renderMarkup(movieData, genreData) {\n  const transformedData = transformData(movieData, genreData);\n\n  return generateMarkup(transformedData);\n}\n\nfunction addMarkup(element, markup) {\n  element.innerHTML = markup;\n}\n\n// MARKUP\n\nfunction generateMarkup(data) {\n  const markup = data\n    .map(\n      movie => ` \n      <li class=\"weekly-item\" data-id=\"${movie.id}\">\n        <a class=\"weekly-link link\" href=\"\">\n            <img class=\"weekly-poster-list\" src=\"https://image.tmdb.org/t/p/w500/${\n              movie.poster\n            }\" alt=\"${movie.title}\" />       \n        <div class=\"weekly-info\">\n            <h2 class=\"weekly-info-title\">${movie.title}</h2>\n                <div class=\"info-movie\">\n                    <p class=\"weekly-info-genre\">${movie.genreFirst},&nbsp ${\n        movie.genreSecond\n      }&nbsp ▏</p>\n                    <p class=\"weekly-info-date\">${movie.release_date.slice(\n                      0,\n                      4\n                    )}</p>\n                </div>\n        </div></a>     \n    </li>\n     `\n    )\n    .join('');\n\n  return markup;\n}\n\n// //FETCH\n\n// const axios = require(\"axios\");\n\n// async function fetchData(END_POINT, options) {\n//   const response = await axios.get(\n//     `${BASE_URL}${END_POINT}`,\n//     options\n//   );\n//   return response.data.results.slice(0, 3);\n// }\n\n// async function fetchGenres(options) {\n//   const response = await axios.get(\n//     `https://api.themoviedb.org/3/genre/movie/list?language=en`,\n//     options\n//   );\n//   return response.data.genres;\n// }\n\n//////копія на всякий случай----------------------------------------------------------------\n// async function fetchData(END_POINT, options) {\n//   const response = await fetch(\n//     `${BASE_URL}${END_POINT}`,\n//     options\n//   );\n//   const data = await response.json();\n//   return data.results.slice(0, 3);\n// }\n\n// async function fetchGenres(options) {\n//   const response = await fetch(\n//     `https://api.themoviedb.org/3/genre/movie/list?language=en`,\n//     options\n//   );\n//   const data = await response.json();\n//   return data.genres;\n// }\n"],"names":["parcelRequire","async","$bce748f2d8dfedab$export$8134c072fddab6a5","END_POINT1","options1","response","fetch","json","results","slice","error","console","log","message","$bce748f2d8dfedab$export$e95d448b93b2cdb","options2","genres","$83069180f38e8654$var$options","method","headers","accept","Authorization","$83069180f38e8654$var$weeklyUlRef","document","querySelector","window","addEventListener","genrePromise","then","movieData","genreData","markup","data","map","movie","genre_ids","id","find","genre","name","release_date","title","poster","poster_path","genreFirst","genreSecond","$83069180f38e8654$var$transformData","join","$83069180f38e8654$var$renderMarkup","element","innerHTML","$83069180f38e8654$var$addMarkup"],"version":3,"file":"index.4b42a2b7.js.map"}