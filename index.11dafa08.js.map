{"mappings":"qLAAA,SAASA,EAAcC,EAAWC,GAgBhC,OAf0BD,EAAUE,KAAIC,IACtC,MACMC,EADWD,EAAME,UACCH,KACtBI,GAAML,EAAUM,MAAKC,GAASA,EAAMF,KAAOA,IAAIG,OAGjD,MAAO,CACLC,aAAcP,EAAMO,aACpBJ,GAAIH,EAAMG,GACVK,MAAOR,EAAMQ,MACbC,OAAQT,EAAMU,YACdC,WAAYV,EAAO,GACnBW,YAAaX,EAAO,GACrB,G,gTCdLY,EAAA,S,uCCEA,SAASC,EAAajB,EAAWC,GAC/B,MAAMiB,EAAkBnB,EAAcC,EAAWC,GAEjD,OAAsBiB,EAKnBhB,KACCC,GAAS,+CAC4BA,EAAMG,kIAGjCH,EAAMS,gBACET,EAAMQ,sFAEAR,EAAMG,iCAC5BH,EAAMQ,6FAGsBR,EAAMG,gCAClCH,EAAMW,oBACEX,EAAMY,6DAEEZ,EAAMG,+BACqBH,EAAMO,aAAaS,MAC9D,EACA,oGAQHC,KAAK,G,CCrCVC,EAAAL,EAAA,a,uCCAA,MAAMM,EAAcC,SAASC,cAAc,gBDKpCC,eAAeC,IACpB,IACE,MACMvB,SADsB,EAAAwB,EAAAC,qBACAC,KAAKC,QAAQX,MAAM,EAAG,GAE5CY,QAAsB,EAAAC,EAAAC,aAItBC,EAASjB,EAAad,EAFV4B,EAAcF,KAAKzB,SAGrC,EAAAiB,EAAAc,WAAUb,EAAaY,GACvBZ,EAAYc,iBAAiB,QAASC,EAAAC,Y,CACtC,MAAOC,GACPC,QAAQC,IAAIF,EAAMG,Q,EEhBtBC,OAAOP,iBAAiB,QAExB,WACEV,G,ICLF,IAAAkB,EAAA5B,EAAA,S,4BCAO,MAAM6B,EAAetB,SAASC,cAAc,wB,iBCAnDsB,EAAA9B,EAAA,SAEA,IAAI+B,EAAa,GAEV,SAASC,EAAa7C,GAC3B,IAAI8C,EAAc9C,EAAM+C,SACpB/C,EAAM+C,SAASC,OAAS,MAC1BF,EAAc9C,EAAM+C,UAIpBH,GADE,EAAAD,EAAAM,kBAAiBjD,EAAMG,IACZ,yBAEA,oBAGf,IAAI+C,EAAc,sKAIdlD,EAAMmD,sFAGNnD,EAAMU,qBACEV,EAAMQ,sGAGsBR,EAAMQ,qTAMcR,EAAMO,aAAa6C,QAAO,sBAEtE,6PAOApD,EAAMqD,qEAEpBrD,EAAMsD,uTAQiDC,OACzCvD,EAAMwD,WAAWC,QAAQ,mOAOzBzD,EAAMC,wPAS0B6C,iFAE1C9C,EAAMG,OACHyC,iDAKT,OAAQ5C,EAAM2B,QA9DE,4DA8DQuB,C,CF9DnB5B,eAAeoC,IACpB,IACE,MAAMC,QAVDlB,EAAAmB,QAAMC,IAAI,GAAGC,EAAAC,yBAA0B,CAC5CC,OAAQ,CACNC,QAASH,EAAAI,QACTC,SAAU,WAQNnE,EACJ2D,EAAcjC,KAAKC,QACjByC,KAAKC,MAAMD,KAAKE,SAAWX,EAAcjC,KAAKC,QAAQqB,SAIpDlD,SADsB,EAAA+B,EAAAC,cACIJ,KAAKzB,OAE/BA,EAASD,EAAME,UAClBH,KAAII,GAAML,EAAUM,MAAKC,GAASA,EAAMF,KAAOA,IAAIG,OACnDU,MAAM,EAAG,GACTC,KAAK,MACRjB,EAAMC,OAASA,EACfyC,EAAa6B,mBAAmB,YAAa1B,EAAa7C,IAElCoB,SAASC,cAAc,0BAE/BY,iBAAiB,QAASU,EAAA6B,iB,CAC1C,MAAOpC,GACPC,QAAQC,IAAIF,EAAMG,Q,EGnCtBC,OAAOP,iBAAiB,QAExB,WACEyB,G","sources":["src/js/utils/weeklyUtils.js","src/index.js","src/js/markup/weeklyMarkup.js","src/js/api/fetchWeekly.js","src/js/refs/weeklyRefs.js","src/js/components/weekly.js","src/js/api/fetchUpcoming.js","src/js/refs/upcomingRefs.js","src/js/markup/upcomingMarkup.js","src/js/components/upcoming.js"],"sourcesContent":["function transformData(movieData, genreData) {\n  const transformedMovies = movieData.map(movie => {\n    const genreIds = movie.genre_ids;\n    const genres = genreIds.map(\n      id => genreData.find(genre => genre.id === id).name\n    );\n\n    return {\n      release_date: movie.release_date,\n      id: movie.id,\n      title: movie.title,\n      poster: movie.poster_path,\n      genreFirst: genres[0],\n      genreSecond: genres[1],\n    };\n  });\n  return transformedMovies;\n}\n\nexport { transformData };\n","import './js/utils/theme';\nimport './js/components/header';\nimport './js/components/hero';\nimport './js/components/weekly';\nimport './js/components/upcoming';\nimport './js/components/modal';\nimport './js/components/footer';\nimport './js/utils/scroll-up';\nimport './js/utils/loader';\n","import { transformData } from '../utils/weeklyUtils';\nimport { addMarkup } from '../utils/addMarkup';\nfunction renderMarkup(movieData, genreData) {\n  const transformedData = transformData(movieData, genreData);\n\n  return generateMarkup(transformedData);\n}\n\nfunction generateMarkup(data) {\n  const markup = data\n    .map(\n      movie => ` \n        <li class=\"weekly-item\" data-id=\"${movie.id}\">\n          <div class=\"weekly-wrap\" \">\n              <img class=\"weekly-poster-img\" src=\"https://image.tmdb.org/t/p/w500/${\n                movie.poster\n              }\" alt=\"${movie.title}\" />       \n          <div class=\"weekly-info\">\n              <h3  data-id=\"${movie.id}\" class=\"weekly-info-title\">${\n        movie.title\n      }</h3>\n                  <div class=\"info-movie\">\n                      <p data-id=\"${movie.id} class=\"weekly-info-genre\">${\n        movie.genreFirst\n      },&nbsp ${movie.genreSecond}&nbsp ‚ñè</p>\n                      <p data-id=\"${\n                        movie.id\n                      } class=\"weekly-info-date\">${movie.release_date.slice(\n        0,\n        4\n      )}</p>\n                  </div>\n          </div>\n          </div>     \n      </li>\n       `\n    )\n    .join('');\n\n  return markup;\n}\n\nexport { renderMarkup, addMarkup, generateMarkup };\n","import { renderMarkup, addMarkup } from '../markup/weeklyMarkup';\nimport { getGenres } from '../api/fetchGenres';\nimport { getTrendingMovie } from '../api/fetchTrandingWeek';\nimport { selectMovie } from '../components/modal';\nimport { weeklyUlRef } from '../refs/weeklyRefs';\nexport async function fetchMovieDetails() {\n  try {\n    const responseMovie = await getTrendingMovie();\n    const movie = responseMovie.data.results.slice(0, 3);\n\n    const responseGenre = await getGenres();\n\n    const genreData = responseGenre.data.genres;\n\n    const markup = renderMarkup(movie, genreData);\n    addMarkup(weeklyUlRef, markup);\n    weeklyUlRef.addEventListener('click', selectMovie);\n  } catch (error) {\n    console.log(error.message);\n  }\n}\n","const weeklyUlRef = document.querySelector('.weekly-list');\nexport { weeklyUlRef };\n","import { fetchMovieDetails } from '../api/fetchWeekly';\n\nwindow.addEventListener('load', onPageLoad);\n\nfunction onPageLoad() {\n  fetchMovieDetails();\n}\n","import axios from 'axios';\nimport { getGenres } from '../api/fetchGenres.js';\nimport { BASE_URL, API_KEY } from './apiKey';\nimport { upcomingList } from '../refs/upcomingRefs.js';\nimport { onAddRemoveMovie } from '../components/modalLocalStorage.js';\nimport { createMarkup } from '../markup/upcomingMarkup.js';\nexport function fetchUpcoming() {\n  return axios.get(`${BASE_URL}movie/upcoming`, {\n    params: {\n      api_key: API_KEY,\n      language: 'en-US',\n    },\n  });\n}\n\nexport async function fetchMovieDetails() {\n  try {\n    const responseMovie = await fetchUpcoming();\n    const movie =\n      responseMovie.data.results[\n        Math.floor(Math.random() * responseMovie.data.results.length)\n      ];\n\n    const responseGenre = await getGenres();\n    const genreData = responseGenre.data.genres;\n\n    const genres = movie.genre_ids\n      .map(id => genreData.find(genre => genre.id === id).name)\n      .slice(0, 2)\n      .join(', ');\n    movie.genres = genres;\n    upcomingList.insertAdjacentHTML('beforeend', createMarkup(movie));\n\n    const addRemoveBtnRef = document.querySelector('.js-add-remove-library');\n\n    addRemoveBtnRef.addEventListener('click', onAddRemoveMovie);\n  } catch (error) {\n    console.log(error.message);\n  }\n}\n","export const upcomingList = document.querySelector('.upcoming-container ');\n","import { IsMovieInLibrary } from '../components/modalLocalStorage.js';\n\nlet textButton = '';\n\nexport function createMarkup(movie) {\n  let textContent = movie.overview;\n  if (movie.overview.length > 300) {\n    textContent = movie.overview;\n  }\n\n  if (IsMovieInLibrary(movie.id)) {\n    textButton = 'Remove from my library';\n  } else {\n    textButton = 'Add to my library';\n  }\n  const message = `<h3 class=\"upcoming-alert\">Ops! No upcoming films...</h3>`;\n  let filmContent = ` \n  <div class =\"upcoming-section-wrap\">\n    <picture class=\"upcoming-poster\">\n    <source media=\"(min-width:768px)\" srcset=\"https://image.tmdb.org/t/p/original${\n      movie.backdrop_path\n    }\">\n    <img class=\"upcoming-img\" src=\"https://image.tmdb.org/t/p/w500${\n      movie.poster_path\n    }\" alt=\"${movie.title}\">\n</picture>\n    <div class=\"upcoming-info-wrap\">\n        <h3 class=\"upcoming-film-title\">${movie.title}</h3>\n        \n        <div class =\"upcoming-info-film-wrap\">\n            <ul class=\"upcoming-info-film-list list\">\n              <li class=\"upcoming-info-film-item\">\n                <p class=\"upcoming-info-film-text\">Release date</p>\n                <p class=\"upcoming-info-film-text release \">${movie.release_date.replace(\n                  /^(\\d+)-(\\d+)-(\\d+)$/,\n                  `$3.$2.$1`\n                )}</p>\n              </li>\n\n              <li class=\"upcoming-info-film-item\">\n                <p class=\"upcoming-info-film-text\">Vote / Votes</p>\n                <p class=\"upcoming-info-film-text\"><span class=\"upcoming-info-film-span\">${\n                  movie.vote_average\n                }</span ><b>/</b><span class=\"upcoming-info-film-span\">${\n    movie.vote_count\n  }</span></p>\n              </li>\n            </ul>\n            \n            <ul class=\"upcoming-info-film-list list\">\n              <li class=\"upcoming-info-film-item\">\n                <p class=\"upcoming-info-film-text\">Popularity</p>\n                <p class=\"upcoming-info-film-text white\">${Number(\n                  movie.popularity.toFixed(1)\n                )}</p>\n              </li>\n\n              <li class=\"upcoming-info-film-item\">\n                <p class=\"upcoming-info-film-text\">Genre</p>\n                <p class=\"upcoming-info-film-text white genre-padding-bottom\">${\n                  movie.genres\n                }</p>\n              </li>\n            </ul> \n             \n        </div>\n    \n        <div class =\"upcoming-info-film-overview\">\n      <h3 class=\"upcoming-info-film-title\">ABOUT</h3>\n      <p class=\"upcoming-info-film-description\">${textContent}</p>\n      <button class=\"btn js-add-remove-library\" type=\"button\" data-id=\"${\n        movie.id\n      }\">${textButton}</button>\n      </div>\n    </div>\n  </div>`;\n\n  return !movie.results ? filmContent : message;\n}\n","import { fetchMovieDetails } from '../api/fetchUpcoming.js';\n\nwindow.addEventListener('load', onPageLoad);\n\nfunction onPageLoad() {\n  fetchMovieDetails();\n}\n"],"names":["$3b8d5ab2bfa9425f$export$3ceb62baab058c6b","movieData","genreData","map","movie","genres","genre_ids","id","find","genre","name","release_date","title","poster","poster_path","genreFirst","genreSecond","parcelRequire","$add57ff5b89d9e56$export$add40575555c273c","transformedData","slice","join","$73Jqe","$164d1c149efb33c5$export$1e4302467ae64eb8","document","querySelector","async","$bce748f2d8dfedab$export$a199ce1860fbd5cd","$g2apD","getTrendingMovie","data","results","responseGenre","$8tr1y","getGenres","markup","addMarkup","addEventListener","$8IXMh","selectMovie","error","console","log","message","window","$2shzp","$f863de9d9819446a$export$557898e65cb5ae6d","$7gMLt","$65213d0054f6b397$var$textButton","$65213d0054f6b397$export$24783e9f3a24abe4","textContent","overview","length","IsMovieInLibrary","filmContent","backdrop_path","replace","vote_average","vote_count","Number","popularity","toFixed","$f370a4cf1ca3d60f$export$a199ce1860fbd5cd","responseMovie","default","get","$bkYP9","BASE_URL","params","api_key","API_KEY","language","Math","floor","random","insertAdjacentHTML","onAddRemoveMovie"],"version":3,"file":"index.11dafa08.js.map"}